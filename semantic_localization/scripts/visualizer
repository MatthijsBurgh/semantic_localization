#!/usr/bin/env python

import argparse
from collections import OrderedDict
import PyKDL as kdl
from pykdl_ros import VectorStamped
import rospy
import tf2_ros
# noinspection PyUnresolvedReferences
import tf2_geometry_msgs
# noinspection PyUnresolvedReferences
import tf2_kdl
import yaml

from geometry_msgs.msg import PointStamped, Quaternion
from std_msgs.msg import ColorRGBA
from visualization_msgs.msg import Marker, MarkerArray


class WM:
    def __init__(self, points: OrderedDict, areas: OrderedDict):

        self._points = points
        self._areas = areas

    @property
    def points(self):
        return self._points

    @property
    def areas(self):
        return self._areas


class Area:
    def __init__(self, corners: list):
        self._corners = corners

    @property
    def corners(self):
        return self._corners


def load_config(file_path):
    with open(file_path, 'r') as f:
        config = yaml.load(f, yaml.CSafeLoader)

    if "points" not in config:
        raise ValueError("No points found in config")

    if "areas" not in config:
        raise ValueError("No areas found in config")

    points = OrderedDict()
    for p in config["points"]:
        v = kdl.Vector(p["position"].x, p["position"].y, 0)
        points[p["name"]] = VectorStamped(v, rospy.Time(0), "map")

    areas = OrderedDict()
    for a in config["areas"]:
        areas[a["name"]]

    return WM(points, areas)


def generate_points_msg(points: OrderedDict):
    """
    Generate points marker msg
    :param points:
    :type points: list
    :return:
    """
    msg = Marker()
    msg.header.stamp = rospy.Time.now()
    msg.header.frame_id = "map"
    msg.ns = "wm"
    msg.id = 1
    msg.type = Marker.SPHERE_LIST
    msg.action = Marker.MODIFY
    msg.pose.orientation = Quaternion(0, 0, 0, 1)
    msg.scale.x = 0.15
    msg.scale.y = 0.15
    msg.scale.z = 0.15
    msg.color = ColorRGBA(r=1.0, g=0.0, b=0.0, a=1.0)

    for p in points.values():
        if p.header.frame_id != "map":
            raise ValueError(f"frame_id of a point should be 'map', not '{p.header.frame_id}'")
        msg.points.append(tf2_ros.convert(p, PointStamped).point)
    # msg.points.extend(Point(**p["position"]) for p in points)
    msg.colors = [msg.color] * len(points)

    return msg


def generate_marker_array_msg(wm):
    msg = MarkerArray()
    msg.markers.append(generate_points_msg(wm.points))

    return msg


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Visualizer")
    parser.add_argument("config", type=str)
    args = parser.parse_args()

    rospy.init_node("visualizer")

    config = load_config(args.config)

    pub = rospy.Publisher("/markers", MarkerArray, queue_size=10)

    msg = generate_marker_array_msg(config)
    print(msg)
    rate = rospy.Rate(1)
    while not rospy.is_shutdown():
        for marker in msg.markers:
            marker.header.stamp = rospy.Time.now()
        pub.publish(msg)
        rate.sleep()
